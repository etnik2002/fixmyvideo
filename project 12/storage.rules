rules_version = '2';

service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    // Allow admin access to all files
    function isAdmin() {
      return isAuthenticated() && (
        request.auth.token.admin == true || 
        request.auth.token.email == 'etnikz2002@gmail.com'
      );
    }
    
    // Allow access to order folders - user-specific rules
    match /orders/{userId}/{orderId}/{allPaths=**} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
      // Allow admins to write to the videos subfolder
      match /videos/{videoFile} {
        allow read: if isOwner(userId);
        allow write: if isOwner(userId) || isAdmin();
      }
    }
    
    // Allow access to all files in the user's folder
    match /uploads/{userId}/{allPaths=**} {
      allow read: if isOwner(userId);
      allow write: if isOwner(userId);
    }
    
    // Legacy path - allow read access to all authenticated users
    match /uploads/{allPaths=**} {
      allow read: if isAuthenticated();
      allow write: if isAuthenticated();
    }
    
    // Temporary uploads folder for guest users
    match /temp-uploads/{sessionId}/{allPaths=**} {
      // Allow anyone to upload, but with a 1-hour expiration
      allow read, write: if request.time < timestamp.date(2099, 12, 31);
    }
  }
}