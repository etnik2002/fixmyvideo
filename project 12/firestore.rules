rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }
    
    function isValidUser() {
      let user = request.resource.data;
      return user.keys().hasAll(['uid', 'email', 'displayName', 'createdAt']) &&
             user.uid is string &&
             (user.email is string || user.email == null) &&
             (user.displayName is string || user.displayName == null) &&
             user.createdAt is number;
    }
    
    function isValidOrder() {
      let order = request.resource.data;
      return order.keys().hasAll(['userId', 'type', 'status', 'createdAt', 'price']) &&
             order.userId is string &&
             order.type in ['Spark', 'Flash', 'Ultra'] &&
             order.status in ['In Bearbeitung', 'Abgeschlossen', 'Storniert'] &&
             order.createdAt is number &&
             order.price is number;
    }
    
    function isValidVideo() {
      let video = request.resource.data;
      return video.keys().hasAll(['userId', 'title', 'status', 'createdAt']) &&
             video.userId is string &&
             video.title is string &&
             video.status in ['In Bearbeitung', 'Fertig'] &&
             video.createdAt is number;
    }
    
    // Allow access to counters collection for order ID generation
    match /counters/{counterId} {
      allow read: if isAuthenticated();
      allow create, update: if isAuthenticated();
    }

    function isValidStripeCheckout() {
      let checkout = request.resource.data;
      return checkout.keys().hasAll(['userId', 'priceId', 'successUrl', 'cancelUrl']) &&
             checkout.userId is string &&
             checkout.priceId is string &&
             checkout.successUrl is string &&
             checkout.cancelUrl is string;
    }

    // User profiles
    match /users/{userId} {
      allow read: if isAuthenticated() && request.auth.uid == userId;
      allow create: if isAuthenticated() && 
                   request.auth.uid == userId && 
                   isValidUser();
      allow update: if isAuthenticated() &&
                   request.auth.uid == userId &&
                   isValidUser() &&
                   request.resource.data.uid == userId;
      allow delete: if isAuthenticated() && request.auth.uid == userId;
    }

    // Orders
    match /orders/{orderId} {
      allow read: if isAuthenticated() && 
                 (resource == null || resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid &&
                   isValidOrder();
      allow update: if isAuthenticated() &&
                   resource.data.userId == request.auth.uid &&
                   isValidOrder() &&
                   request.resource.data.userId == resource.data.userId;
      allow delete: if false; // Orders should never be deleted
    }

    // Videos
    match /videos/{videoId} {
      allow read: if isAuthenticated() && 
                 (resource == null || resource.data.userId == request.auth.uid);
      allow create: if isAuthenticated() && 
                   request.resource.data.userId == request.auth.uid &&
                   isValidVideo();
      allow update: if isAuthenticated() &&
                   resource.data.userId == request.auth.uid &&
                   isValidVideo() &&
                   request.resource.data.userId == resource.data.userId;
      allow delete: if isAuthenticated() && 
                   resource.data.userId == request.auth.uid;
    }
    
    // Stripe Checkout
    match /stripeCheckout/{docId} {
      allow read: if isAuthenticated() || 
                 (resource.data.userId == 'guest') ||
                 request.auth.token.firebase.sign_in_provider == 'google.com';
      allow create: if (isAuthenticated() || true) && // Allow both authenticated and guest users
                   isValidStripeCheckout();
      allow update: if request.auth.token.firebase.sign_in_provider == 'google.com' || false; // Allow Cloud Functions to update
      allow delete: if false;
    }
    
    // Stripe Customers
    match /customers/{customerId} {
      allow read: if isAuthenticated() && 
                 resource.data.userId == request.auth.uid;
      allow write: if request.auth.token.firebase.sign_in_provider == 'google.com' || false; // Allow Cloud Functions to write
    }

    // Subscriptions
    match /subscriptions/{subscriptionId} {
      allow read: if isAuthenticated() && 
                 resource.data.userId == request.auth.uid;
      allow write: if request.auth.token.firebase.sign_in_provider == 'google.com' || false; // Allow Cloud Functions to write
    }
  }
}